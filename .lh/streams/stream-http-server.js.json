{
    "sourceFile": "streams/stream-http-server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1749529464620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749529471750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,8 @@\n import http from \"node:http\";\n \n-// GET => Busca um recurso do backend\n-// POST => Cria um novo recurso no backend\n-// PUT => Atualiza um recurso existente no backend\n-// DELETE => Remove um recurso do backend\n-// PATCH => Atualiza parcialmente um recurso existente no backend\n-// HEAD => Obtém os cabeçalhos de resposta sem o corpo\n-// OPTIONS => Obtém os métodos HTTP suportados pelo recurso\n-// TRACE => Realiza um loop de retorno para teste de diagnóstico\n-// CONNECT => Estabelece um túnel para um servidor remoto\n-// HTTP/1.1 => Protocolo de comunicação entre cliente e servidor\n-// HTTP/2 => Versão mais recente do protocolo HTTP, com melhorias de desempenho\n-// HTTP/3 => Protocolo mais recente, baseado em QUIC, com melhorias de latência e segurança\n-// WebSocket => Protocolo de comunicação bidirecional sobre HTTP, usado para aplicações em tempo real\n-// REST => Arquitetura de software para sistemas distribuídos, baseada em recursos e métodos HTTP\n-// GraphQL => Linguagem de consulta para APIs, permite solicitar exatamente os dados necessários\n-// JSON => Formato de intercâmbio de dados leve e fácil de ler, usado em APIs\n-// XML => Formato de intercâmbio de dados mais complexo, usado em APIs mais antigas\n-// API => Interface de Programação de Aplicações, permite a comunicação entre sistemas diferentes\n \n+\n const users = [];\n \n const server = http.createServer((req, res) => {\n   const { method, url } = req;\n"
                },
                {
                    "date": 1749529481128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,7 @@\n import http from \"node:http\";\n \n \n-\n-const users = [];\n-\n const server = http.createServer((req, res) => {\n   const { method, url } = req;\n   console.log(`Received ${method} request for ${url}`);\n \n"
                },
                {
                    "date": 1749529487323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,32 +5,10 @@\n   const { method, url } = req;\n   console.log(`Received ${method} request for ${url}`);\n \n \n-  if(method === \"GET\" && url === \"/users\") {\n-    return res\n-    .setHeader(\"Content-Type\", \"application/json\")\n-    .end(JSON.stringify(users));\n-  }\n+ \n \n-  if(method === \"POST\" && url === \"/users\") {\n-\n-    const user = {\n-      id: users.length + 1,\n-      name: `User ${users.length + 1}`,\n-    };\n-    users.push(user)\n-    return res\n-    .writeHead(201)\n-    .end();\n-  }\n-\n-  return res\n-    .writeHead(404, {\n-      \"Content-Type\": \"application/json\",\n-    })\n-    .end(JSON.stringify({ error: \"Not Found\" }));\n-\n });\n \n server.listen(3000, () => {\n   console.log(\"Server is running at http://localhost:3000/\");\n"
                },
                {
                    "date": 1749529708911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,16 @@\n   const { method, url } = req;\n   console.log(`Received ${method} request for ${url}`);\n \n \n- \n+ class NegativeNumberStream extends Transform {\n+  _transform(chunk, encoding, callback) {\n+    const number = Number(chunk.toString());\n+    const inverse = -1 * number;\n+    const transformad = Buffer.from(String(inverse))\n+    callback(null, transformad);\n+  }\n+}\n \n });\n \n server.listen(3000, () => {\n"
                },
                {
                    "date": 1749529716141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,22 @@\n import http from \"node:http\";\n \n-\n-const server = http.createServer((req, res) => {\n-  const { method, url } = req;\n-  console.log(`Received ${method} request for ${url}`);\n-\n-\n- class NegativeNumberStream extends Transform {\n+class NegativeNumberStream extends Transform {\n   _transform(chunk, encoding, callback) {\n     const number = Number(chunk.toString());\n     const inverse = -1 * number;\n     const transformad = Buffer.from(String(inverse))\n     callback(null, transformad);\n   }\n }\n \n+const server = http.createServer((req, res) => {\n+  const { method, url } = req;\n+  console.log(`Received ${method} request for ${url}`);\n+\n+\n+\n+\n });\n \n server.listen(3000, () => {\n   console.log(\"Server is running at http://localhost:3000/\");\n"
                },
                {
                    "date": 1749529725882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,11 @@\n const server = http.createServer((req, res) => {\n   const { method, url } = req;\n   console.log(`Received ${method} request for ${url}`);\n \n+  \n \n \n-\n });\n \n server.listen(3000, () => {\n   console.log(\"Server is running at http://localhost:3000/\");\n"
                },
                {
                    "date": 1749529796530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   const { method, url } = req;\n   console.log(`Received ${method} request for ${url}`);\n \n   if (method === \"POST\" && url === \"/\") {\n-    req\n+    returnreq\n       .pipe(new NegativeNumberStream())\n       .pipe(res)\n       .on(\"finish\", () => {\n         console.log(\"Response sent successfully.\");\n"
                },
                {
                    "date": 1749529890501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import http from \"node:http\";\n import {  Transform } from \"node:stream\";\n+\n class NegativeNumberStream extends Transform {\n   _transform(chunk, encoding, callback) {\n     const number = Number(chunk.toString());\n     const inverse = -1 * number;\n"
                }
            ],
            "date": 1749529464620,
            "name": "Commit-0",
            "content": "import http from \"node:http\";\n\n// GET => Busca um recurso do backend\n// POST => Cria um novo recurso no backend\n// PUT => Atualiza um recurso existente no backend\n// DELETE => Remove um recurso do backend\n// PATCH => Atualiza parcialmente um recurso existente no backend\n// HEAD => Obtém os cabeçalhos de resposta sem o corpo\n// OPTIONS => Obtém os métodos HTTP suportados pelo recurso\n// TRACE => Realiza um loop de retorno para teste de diagnóstico\n// CONNECT => Estabelece um túnel para um servidor remoto\n// HTTP/1.1 => Protocolo de comunicação entre cliente e servidor\n// HTTP/2 => Versão mais recente do protocolo HTTP, com melhorias de desempenho\n// HTTP/3 => Protocolo mais recente, baseado em QUIC, com melhorias de latência e segurança\n// WebSocket => Protocolo de comunicação bidirecional sobre HTTP, usado para aplicações em tempo real\n// REST => Arquitetura de software para sistemas distribuídos, baseada em recursos e métodos HTTP\n// GraphQL => Linguagem de consulta para APIs, permite solicitar exatamente os dados necessários\n// JSON => Formato de intercâmbio de dados leve e fácil de ler, usado em APIs\n// XML => Formato de intercâmbio de dados mais complexo, usado em APIs mais antigas\n// API => Interface de Programação de Aplicações, permite a comunicação entre sistemas diferentes\n\nconst users = [];\n\nconst server = http.createServer((req, res) => {\n  const { method, url } = req;\n  console.log(`Received ${method} request for ${url}`);\n\n\n  if(method === \"GET\" && url === \"/users\") {\n    return res\n    .setHeader(\"Content-Type\", \"application/json\")\n    .end(JSON.stringify(users));\n  }\n\n  if(method === \"POST\" && url === \"/users\") {\n\n    const user = {\n      id: users.length + 1,\n      name: `User ${users.length + 1}`,\n    };\n    users.push(user)\n    return res\n    .writeHead(201)\n    .end();\n  }\n\n  return res\n    .writeHead(404, {\n      \"Content-Type\": \"application/json\",\n    })\n    .end(JSON.stringify({ error: \"Not Found\" }));\n\n});\n\nserver.listen(3000, () => {\n  console.log(\"Server is running at http://localhost:3000/\");\n});\n"
        }
    ]
}